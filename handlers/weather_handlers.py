from datetime import datetime, timedelta

from aiogram import types
from aiogram.utils.exceptions import MessageNotModified

from bot import (
    bot, Dispatcher, InlineKeyboards
)

from db import Database, CitiesScheme

from weatherbitAPI import (
    WeatherAPI, WeatherHandler, WeatherSchemeData, WeatherSchemeDataToday, AirQualityScheme
)

from typing import Optional

db = Database()
api = WeatherAPI()

handler = WeatherHandler()


async def get_1_day_forecast(callback_query: types.CallbackQuery):
    user: Optional[CitiesScheme] = await db.get_user_info(callback_query.from_user.id)

    if not user:
        await callback_query.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥!', show_alert=True)
    else:
        current_date = datetime.now().date()
        date_2_day = (current_date + timedelta(days=2)).strftime("%Y-%m-%d")
        date_3_day = (current_date + timedelta(days=3)).strftime("%Y-%m-%d")
        date_4_day = (current_date + timedelta(days=4)).strftime("%Y-%m-%d")

        is_updated_today: bool = user.days_4_update_on.strftime("%Y-%m-%d") == current_date.strftime("%Y-%m-%d")

        if is_updated_today and user.weather_forecast_for_1_day:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=user.weather_forecast_for_1_day,
                    reply_markup=InlineKeyboards.change_days_forecasts_keyboard(
                        day_2=2, day_3=3, day_4=4,
                        date_of_2_day=date_2_day, date_of_3_day=date_3_day, date_of_4_day=date_4_day
                    ),
                    parse_mode='HTML'
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

        else:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="–û–∂–∏–¥–∞–π—Ç–µ... üîé",
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

            forecast_json = await api.get_4_days_forecasts(city=user.city)
            parsed_json = handler.parse_json_forecasts_for_4_days(forecast_json)

            weather: list[list[WeatherSchemeData]] = handler.get_4_days_forecasts(parsed_json).data

            days: list[str] = []

            for day in weather:
                day: list[WeatherSchemeData]

                lst = []

                for time in day:
                    lst.append([*time.weather.description.items()])
                lst = [sorted(sublist, key=lambda x: x[1], reverse=True) for sublist in lst]

                text_weather = f"""
<u><b>–ß–∏—Å–ª–æ - {day[0].datetime[:10]}</b></u> üìÜ


<i><b>–ù–æ—á—å (—Å 00 –ø–æ {day[0].datetime[-2:]})</b></i> üåô
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[0].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[0].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[0].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[0].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[0].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[0].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[0].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[0].uv}
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[0][0][0]} - {round(lst[0][0][1] * (100 / 6))}%
{f'{lst[0][1][0]} - {round(lst[0][1][1] * (100 / 6))}%' if len(lst[0]) > 1 else ''}</b>

<i><b>–£—Ç—Ä–æ (—Å 06 –ø–æ {day[1].datetime[-2:]})</b></i> üåÖ
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[1].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[1].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[1].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[1].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[1].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[1].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[1].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[1].uv}
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[1][0][0]} - {round(lst[1][0][1] * (100 / 6))}%
{f'{lst[1][1][0]} - {round(lst[1][1][1] * (100 / 6))}%' if len(lst[1]) > 1 else ''}</b>
         
<i><b>–î–µ–Ω—å (—Å 12 –ø–æ {day[2].datetime[-2:]})</b></i> üåû
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[2].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[2].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[2].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[2].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[2].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[2].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[2].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[2].uv}
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[2][0][0]} - {round(lst[2][0][1] * (100 / 6))}%
{f'{lst[2][1][0]} - {round(lst[2][1][1] * (100 / 6))}%' if len(lst[2]) > 1 else ''}</b>

<i><b>–í–µ—á–µ—Ä (—Å 18 –ø–æ {day[3].datetime[-2:]})</b></i> üåÜ
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[3].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[3].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[3].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[3].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[3].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[3].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[3].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[3].uv}
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[3][0][0]} - {round(lst[3][0][1] * (100 / 6))}%
{f'{lst[3][1][0]} - {round(lst[3][1][1] * (100 / 6))}%' if len(lst[3]) > 1 else ''}</b>"""

                if not days:
                    try:
                        await bot.edit_message_text(
                            chat_id=callback_query.message.chat.id,
                            message_id=callback_query.message.message_id,
                            text=text_weather,
                            reply_markup=InlineKeyboards.change_days_forecasts_keyboard(
                                day_2=2, day_3=3, day_4=4,
                                date_of_2_day=date_2_day, date_of_3_day=date_3_day, date_of_4_day=date_4_day
                            ),
                            parse_mode="HTML"
                        )
                    except MessageNotModified:
                        await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

                days.append(text_weather)

            await db.update_weather_info_forecasts_by_city(
                city=user.city,
                day1=days[0],
                day2=days[1],
                day3=days[2],
                day4=days[3]
            )


async def get_4_days_forecasts(callback_query: types.CallbackQuery):
    user: Optional[CitiesScheme] = await db.get_user_info(callback_query.from_user.id)

    if not user:
        try:
            await callback_query.answer('–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ...', show_alert=True)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:  ",
                reply_markup=InlineKeyboards.main_keyboard(),
            )
        except MessageNotModified:
            await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')
    else:
        current_date = datetime.now().date()
        date_1_day = (current_date + timedelta(days=1)).strftime("%Y-%m-%d")
        date_2_day = (current_date + timedelta(days=2)).strftime("%Y-%m-%d")
        date_3_day = (current_date + timedelta(days=3)).strftime("%Y-%m-%d")
        date_4_day = (current_date + timedelta(days=4)).strftime("%Y-%m-%d")

        day = callback_query.data[0]

        data = {
            'day_1': 1,
            'day_2': 2,
            'day_3': 3,
            'day_4': 4,

            'date_of_1_day': date_1_day,
            'date_of_2_day': date_2_day,
            'date_of_3_day': date_3_day,
            'date_of_4_day': date_4_day,
        }

        del data[f'day_{day}']
        del data[f'date_of_{day}_day']

        is_updated_today = user.days_4_update_on.strftime("%Y-%m-%d") == current_date.strftime("%Y-%m-%d")

        if is_updated_today and user.weather_forecast_for_2_day:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=getattr(user, f'weather_forecast_for_{day}_day'),
                    reply_markup=InlineKeyboards.change_days_forecasts_keyboard(**data),
                    parse_mode='HTML'
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

        else:
            try:
                await callback_query.answer('–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ...', show_alert=True)
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:  ",
                    reply_markup=InlineKeyboards.main_keyboard(),
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')


async def get_today_forecast(callback_query: types.CallbackQuery):
    user: Optional[CitiesScheme] = await db.get_user_info(callback_query.from_user.id)

    if not user:
        await callback_query.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥!', show_alert=True)
    else:
        is_updated_now = user.today_update_on.strftime("%Y-%m-%d-%H") == datetime.now().strftime("%Y-%m-%d-%H")

        if is_updated_now and user.weather_info_today:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=user.weather_info_today,
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                    parse_mode='HTML'
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

        else:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="–û–∂–∏–¥–∞–π—Ç–µ... üîé",
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                )

            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

            else:
                try:
                    json = await api.get_weather_for_today(city=user.city)

                    data: WeatherSchemeDataToday = handler.parse_json_forecasts_for_today(json)

                    text = f"""
<i><b>–î–∞—Ç–∞ - {datetime.now().strftime("%Y-%m-%d  %H")} —á–∞—Å–æ–≤</b></i> üìÜ

–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞ - {data.sunrise} (UTC +3:00) üåá
–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ - {data.sunset} (UTC +3:00) üèô

–î–∞–≤–ª–µ–Ω–∏–µ - {round(data.pres * 0.75006)}

–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - {data.wind_spd} –º/—Å üí®
{f'–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ä—ã–≤–∞ –≤–µ—Ç—Ä–∞ - {data.gust} –º/—Å' if data.gust else ''} 
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {data.wind_cdir_full}

–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {data.temp}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {data.app_temp}¬∞C 

–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {data.rh} % üíß
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {data.clouds} % ‚òÅÔ∏è
–í–∏–¥–∏–º–æ—Å—Ç—å - {data.vis} –∫–º üëÅ
–£–§-–∏–Ω–¥–µ–∫—Å - {data.uv}
–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ - {data.aqi}


<b>–°—Ç–∞—Ç—É—Å: {data.weather.description}</b>"""

                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text=text,
                        reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                        parse_mode='HTML'
                    )
                except MessageNotModified:
                    await callback_query.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')
                else:
                    await db.update_weather_info_today_by_city(
                        city=user.city,
                        new_weather_info_today=text
                    )


async def get_today_air_quality_forecast(callback_query: types.CallbackQuery):
    user: Optional[CitiesScheme] = await db.get_user_info(callback_query.from_user.id)

    if not user:
        await callback_query.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥!', show_alert=True)
    else:
        is_updated_now = user.air_quality_update_on.strftime("%Y-%m-%d") == datetime.now().strftime("%Y-%m-%d")

        if is_updated_now and user.weather_info_today:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=user.air_quality_today,
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                    parse_mode='HTML'
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

        else:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="–û–∂–∏–¥–∞–π—Ç–µ... üîé",
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                )

            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

            else:
                try:
                    json = await api.get_air_quality_for_today(city=user.city)

                    data: AirQualityScheme = handler.parse_json_air_quality_forecast_for_today(json)
                    levels = {0: '–ù–µ—Ç', 1: '–ù–∏–∑–∫–∏–π', 2: '–£–º–µ—Ä–µ–Ω–Ω—ã–π', 3: '–í—ã—Å–æ–∫–∏–π', 4: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'}

                    predominant_pollens = {
                        'Trees': '–ü—ã–ª—å—Ü–∞ –æ—Ç —Ü–≤–µ—Ç–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ üå≥',
                        'Weeds': '–ü—ã–ª—å—Ü–∞ –æ—Ç —Ü–≤–µ—Ç–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–æ—Ä–Ω—è–∫–æ–≤ üåæ',
                        'Molds': '–°–ø–æ—Ä—ã –ø–ª–µ—Å–µ–Ω–∏ ü¶†',
                        'Grasses': '–ü—ã–ª—å—Ü–∞ –æ—Ç —Ü–≤–µ—Ç–µ–Ω–∏—è —Ç—Ä–∞–≤ üåø'
                    }

                    text = f"""
<i><b>–î–∞—Ç–∞ - {datetime.now().strftime("%Y-%m-%d")}</b></i> üïí

–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞: {data.aqi} üå¨Ô∏è


<b>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –æ–∑–æ–Ω–∞</b> (O3) –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ - {round(data.o3, 1)} (¬µ–≥/–º¬≥) üå´Ô∏è

<b>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –¥–∏–æ–∫—Å–∏–¥–∞ —Å–µ—Ä—ã</b> (SO2) –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ - {round(data.so2, 1)} (¬µ–≥/–º¬≥) üè≠

<b>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –¥–∏–æ–∫—Å–∏–¥–∞ –∞–∑–æ—Ç–∞</b> (NO2) –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ - {round(data.no2, 1)} (¬µ–≥/–º¬≥) üöó

<b>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —É–≥–∞—Ä–Ω–æ–≥–æ –≥–∞–∑–∞ (CO)</b> - {round(data.co, 1)} (¬µ–≥/–º¬≥) üî•


<b>–£—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã –¥–µ—Ä–µ–≤—å–µ–≤ - {levels[data.pollen_level_tree]}</b> üå≥
<b>–£—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã —Ç—Ä–∞–≤ - {levels[data.pollen_level_grass]}</b> üåø
<b>–£—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã —Å–æ—Ä–Ω—è–∫–æ–≤ - {levels[data.pollen_level_weed]}</b> üåæ
<b>–£—Ä–æ–≤–µ–Ω—å –ø–ª–µ—Å–µ–Ω–∏ - {levels[data.mold_level]}</b> ü¶†


<i>–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ç–∏–ø –ø—ã–ª—å—Ü—ã</i> - {predominant_pollens[data.predominant_pollen_type]}
"""
                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text=text,
                        reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                        parse_mode='HTML'
                    )
                except MessageNotModified:
                    await callback_query.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')
                else:
                    await db.update_air_quality_info_today_by_city(
                        city=user.city,
                        new_air_quality_info_today=text
                    )


def register_weather_handlers(dispatcher: Dispatcher):
    dispatcher.register_callback_query_handler(get_1_day_forecast, lambda cb: cb.data == '1_day')
    dispatcher.register_callback_query_handler(get_4_days_forecasts, lambda cb: cb.data in ('2_day', '3_day', '4_day'))
    dispatcher.register_callback_query_handler(get_today_forecast, lambda cb: cb.data == 'forecast_for_today')
    dispatcher.register_callback_query_handler(get_today_air_quality_forecast, lambda cb: cb.data == 'air_quality')