import datetime

from aiogram import types
from aiogram.utils.exceptions import MessageNotModified

from bot import (
    bot, Dispatcher, InlineKeyboards
)

from db import Database, CitiesScheme

from weatherbitAPI import (
    WeatherAPI, WeatherHandler, WeatherSchemeData, WeatherSchemeDataToday
)

from typing import Optional

db = Database()
api = WeatherAPI()

handler = WeatherHandler()


async def get_3_day_forecast(callback_query: types.CallbackQuery):
    user: Optional[CitiesScheme] = await db.get_user_info(callback_query.from_user.id)

    if not user:
        await callback_query.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥!')
    else:
        is_updated_today = user.update_on.strftime("%Y-%m-%d") == datetime.datetime.now().strftime("%Y-%m-%d")

        if is_updated_today and user.weather_forecast_for_3_days:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=user.weather_forecast_for_3_days,
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                    parse_mode='HTML'
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

        else:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="–û–∂–∏–¥–∞–π—Ç–µ... üîé",
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

            forecast_json = await api.get_3_day_forecasts(city=user.city)
            parsed_json = handler.parse_json_forecasts(forecast_json)

            weather: list[list[WeatherSchemeData]] = handler.get_3_days_forecast(parsed_json).data
            text = ''

            for day in weather:
                day: list[WeatherSchemeData] = day

                lst = []

                for time in day:
                    lst.append([*time.weather.description.items()])
                lst = [sorted(sublist, key=lambda x: x[1], reverse=True) for sublist in lst]

                text_plus = f"""
<u><b>–ß–∏—Å–ª–æ - {day[0].datetime[:10]}</b></u> üìÜ


<i><b>–ù–æ—á—å (—Å 00 –ø–æ {day[0].datetime[-2:]})</b></i> üåô
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[0].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[0].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[0].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[0].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[0].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[0].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[0].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[0].uv} (0 - +11)
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[0][0][0]} - {round(lst[0][0][1] * (100 / 6))}%
{f'{lst[0][1][0]} - {round(lst[0][1][1] * (100 / 6))}%' if len(lst[0]) > 1 else ' '}</b>

<i><b>–£—Ç—Ä–æ (—Å 06 –ø–æ {day[1].datetime[-2:]})</b></i> üåÖ
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[1].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[1].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[1].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[1].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[1].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[1].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[1].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[1].uv} (0 - +11)
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[1][0][0]} - {round(lst[1][0][1] * (100 / 6))}%
{f'{lst[1][1][0]} - {round(lst[1][1][1] * (100 / 6))}%' if len(lst[1]) > 1 else ' '}</b>
         
<i><b>–î–µ–Ω—å (—Å 12 –ø–æ {day[2].datetime[-2:]})</b></i> üåû
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[2].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[2].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[2].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[2].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[2].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[2].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[2].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[2].uv} (0 - +11)
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[2][0][0]} - {round(lst[2][0][1] * (100 / 6))}%
{f'{lst[2][1][0]} - {round(lst[2][1][1] * (100 / 6))}%' if len(lst[2]) > 1 else ' '}</b>

<i><b>–í–µ—á–µ—Ä (—Å 18 –ø–æ {day[3].datetime[-2:]})</b></i> üåÜ
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {day[3].wind_cdir_full} üí®
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[3].temp, 1)}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(day[3].app_temp, 1)}¬∞C
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ - {day[3].pop}%
–î–∞–≤–ª–µ–Ω–∏–µ - {round(day[3].pres * 0.75006)} –º–º —Ä—Ç. —Å—Ç.
–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day[3].rh}%
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {day[3].clouds}% ‚òÅÔ∏è
–£–§-–∏–Ω–¥–µ–∫—Å - {day[3].uv} (0 - +11)
<b>–°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: 
{lst[3][0][0]} - {round(lst[3][0][1] * (100 / 6))}%
{f'{lst[3][1][0]} - {round(lst[3][1][1] * (100 / 6))}%' if len(lst[3]) > 1 else ''}</b>"""
                text += f'{text_plus}\n\n'
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=text + '\n–õ–∏—Å—Ç–∞–π —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ ‚¨ÜÔ∏è',
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                    parse_mode='HTML'
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            else:
                await db.update_weather_info_forecast_by_city(
                    city=user.city,
                    new_weather_info_forecasts=text + '–õ–∏—Å—Ç–∞–π —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ ‚¨ÜÔ∏è'
                )


async def get_today_forecast(callback_query: types.CallbackQuery):
    user: Optional[CitiesScheme] = await db.get_user_info(callback_query.from_user.id)

    if not user:
        await callback_query.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥!')
    else:
        is_updated_today = user.update_on.strftime("%Y-%m-%d") == datetime.datetime.now().strftime("%Y-%m-%d")

        if is_updated_today and user.weather_info_today:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=user.weather_info_today,
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                    parse_mode='HTML'
                )
            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

        else:
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="–û–∂–∏–¥–∞–π—Ç–µ... üîé",
                    reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                )

            except MessageNotModified:
                await callback_query.answer('–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')

            else:
                try:
                    json = await api.get_weather_for_today(city=user.city)

                    data: WeatherSchemeDataToday = handler.parse_json_for_today(json)

                    text = f"""
<i><b>–î–∞—Ç–∞ - {data.datetime}</b></i> üìÜ

–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞ - {data.sunrise} (UTC +3:00) üåá
–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ - {data.sunset} (UTC +3:00) üèô

–î–∞–≤–ª–µ–Ω–∏–µ - {round(data.pres * 0.75006)}

–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - {data.wind_spd} –º/—Å üí®
{f'–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ä—ã–≤–∞ –≤–µ—Ç—Ä–∞ - {data.gust} –º/—Å' if data.gust else ''} 
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - {data.wind_cdir_full}

–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {data.temp}¬∞C üå°
–ö–∞–∂—É—â–∞—è—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {data.app_temp}¬∞C 

–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {data.rh} % üíß
–û–±–ª–∞—á–Ω–æ—Å—Ç—å - {data.clouds} % ‚òÅÔ∏è
–í–∏–¥–∏–º–æ—Å—Ç—å - {data.vis} –∫–º üëÅ
–£–§-–∏–Ω–¥–µ–∫—Å - {data.uv} (0 - +11)
–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ - {data.aqi} (0 - +500)


<b>–°—Ç–∞—Ç—É—Å: {data.weather.description}</b>"""

                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text=text,
                        reply_markup=InlineKeyboards.transition_to_main_keyboard(),
                        parse_mode='HTML'
                    )
                except MessageNotModified:
                    await callback_query.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')
                else:
                    await db.update_weather_info_today_by_city(
                        city=user.city,
                        new_weather_info_today=text
                    )


def register_weather_handlers(dispatcher: Dispatcher):
    dispatcher.register_callback_query_handler(get_3_day_forecast, lambda cb: cb.data == '3_day_forecast')
    dispatcher.register_callback_query_handler(get_today_forecast, lambda cb: cb.data == 'forecast_for_today')
